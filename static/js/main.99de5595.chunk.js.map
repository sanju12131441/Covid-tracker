{"version":3,"sources":["components/worlddata/worldData.js","pages/overview/overview.js","pages/worldDataInTable/worlddataintable.js","pages/worldDataInGraphichalView/worldDataInGraphichalView.js","Router.js","components/layout/layout.js","theme/overrides/index.js","theme/overrides/MuiNavBar.js","theme/palette.js","theme/index.js","theme/typography.js","App.js","serviceWorker.js","index.js"],"names":["worldData","heading","data","length","className","Typography","variant","Grid","container","spacing","map","obj","item","xs","sm","md","key","Paper","Skeleton","value","title","subtitle","OverView","props","compareValues","order","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","state","top5CountriesData","top5StatesData","stateWiseData","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","this","getWorldData","getIndiaData","axios","get","then","res","totalActiveCases","reduce","sum","val","infected","sort","slice","forEach","country","push","totalRecoveredCases","recovered","totalDeaths","deceased","setState","regionData","region","totalCases","Button","color","startIcon","Component","WorldDataInTable","handleChangePage","event","newPage","page","handleChangeRowsPerPage","rowsPerPage","target","columns","id","CircularProgress","gutterBottom","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","align","style","minWidth","TableBody","row","hover","role","tabIndex","format","TablePagination","rowsPerPageOptions","component","count","onChangePage","onChangeRowsPerPage","top5CountriesCases","top5CountriesNames","MainRouter","path","withRouter","exact","render","to","WolrdDataInTable","WolrdDataInGraphs","useStyles","makeStyles","theme","createStyles","root","display","appBar","zIndex","drawer","breakpoints","up","width","flexShrink","userName","marginLeft","marginRight","menuButton","toolbar","mixins","drawerPaper","content","flexGrow","minHeight","padding","down","justifyContent","link","fontSize","textDecoration","ResponsiveDrawer","companyName","window","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","drawerContainer","List","activeClassName","ListItem","button","ListItemText","primary","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","edge","onClick","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","Router","MuiNavBar","dark","main","colors","grey","secondary","createMuiTheme","palette","overrides","typography","caption","location","pathname","ThemeProvider","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99de5595.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography, Paper, Grid } from '@material-ui/core';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport './worldData.css'\r\n\r\nconst worldData = ({ heading = 'Hold On...', data = [] }) => {\r\n    if (data.length === 0) {\r\n        return (\r\n            <div className='masterContainer'>\r\n                <Typography variant=\"body1\" className='heading'>\r\n                    {heading}\r\n                </Typography>\r\n                <Grid container spacing={2} >\r\n                    {\r\n                        [0, 1, 2, 3].map(obj => {\r\n                            return (\r\n                                <Grid item xs={6} sm={4} md={3} key={obj}>\r\n                                    <Paper className='dataContainer'>\r\n                                        <Typography variant=\"caption\">\r\n                                            <Skeleton />\r\n                                        </Typography>\r\n                                        <Typography variant=\"h6\" >\r\n                                            <Skeleton />\r\n                                        </Typography>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='masterContainer'>\r\n            <Typography variant=\"body1\" className='heading'>\r\n                {heading}\r\n            </Typography>\r\n            <Grid container spacing={2} >\r\n                {\r\n                    data.map(obj => {\r\n                        return (\r\n                            <Grid item xs={6} sm={4} md={3} key={obj.value}>\r\n                                <Paper className='dataContainer'>\r\n                                    <Typography variant=\"caption\">\r\n                                        {obj.title}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h6\" >\r\n                                        {obj.value}\r\n                                    </Typography>\r\n                                    <Typography variant=\"caption\">\r\n                                        {obj.subtitle}\r\n                                    </Typography>\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default worldData; ","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport WorldData from '../../components/worlddata/worldData';\r\nimport './overview.css'\r\n\r\nclass OverView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            worldData: [],\r\n            top5CountriesData: [],\r\n            top5StatesData: [],\r\n            stateWiseData: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: 'Total Active Cases',\r\n                        backgroundColor: 'rgba(255,99,132,0.2)',\r\n                        borderColor: 'rgba(255,99,132,1)',\r\n                        borderWidth: 1,\r\n                        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                        hoverBorderColor: 'rgba(255,99,132,1)',\r\n                        data: []\r\n                    }\r\n                ]\r\n            },\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getWorldData();\r\n        this.getIndiaData();\r\n    }\r\n\r\n    compareValues = (key, order = 'asc') => {\r\n        return function innerSort(a, b) {\r\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n                // property doesn't exist on either object\r\n                return 0;\r\n            }\r\n\r\n            const varA = (typeof a[key] === 'string')\r\n                ? a[key].toUpperCase() : a[key];\r\n            const varB = (typeof b[key] === 'string')\r\n                ? b[key].toUpperCase() : b[key];\r\n\r\n            let comparison = 0;\r\n            if (varA > varB) {\r\n                comparison = 1;\r\n            } else if (varA < varB) {\r\n                comparison = -1;\r\n            }\r\n            return (\r\n                (order === 'desc') ? (comparison * -1) : comparison\r\n            );\r\n        };\r\n    }\r\n\r\n\r\n    getWorldData() {\r\n        axios.get('https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true').then(res => {\r\n            const totalActiveCases = res.data.reduce((sum, val) => sum + val.infected, 0);\r\n            const top5CountriesData = [];\r\n            res.data.sort(this.compareValues('infected', 'desc')).slice(0, 5).forEach(val => {\r\n                val['title'] = val.country;\r\n                val['value'] = val.infected;\r\n                top5CountriesData.push(val)\r\n            });\r\n            let totalRecoveredCases = 0;\r\n            res.data.forEach(val => {\r\n                if (val.recovered !== 'NA') {\r\n                    totalRecoveredCases = totalRecoveredCases + val.recovered\r\n                }\r\n            });\r\n            const totalDeaths = res.data.reduce((sum, val) => sum + val.deceased, 0);\r\n            const worldData = [\r\n                { title: 'Active Cases', value: totalActiveCases },\r\n                { title: 'Recovered', value: totalRecoveredCases },\r\n                { title: 'Total Deaths', value: totalDeaths },\r\n            ]\r\n\r\n            this.setState({\r\n                worldData,\r\n                top5CountriesData,\r\n            })\r\n        })\r\n    }\r\n\r\n    getIndiaData() {\r\n        axios.get('https://api.apify.com/v2/key-value-stores/toDWvRj1JpTXiM8FF/records/LATEST?disableRedirect=true').then(res => {\r\n            const stateWiseData = { ...this.state.stateWiseData };\r\n            stateWiseData.labels = res.data.regionData.map(obj => obj.region);\r\n            stateWiseData.datasets[0].data = res.data.regionData.map(obj => obj.totalCases);\r\n            const top5StatesData = [];\r\n            res.data.regionData.sort(this.compareValues('totalCases', 'desc')).slice(0, 5).forEach(val => {\r\n                val['title'] = val.region;\r\n                val['value'] = val.totalCases;\r\n                top5StatesData.push(val)\r\n            });\r\n            this.setState({\r\n                stateWiseData,\r\n                top5StatesData\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { worldData, top5CountriesData,top5StatesData } = this.state;\r\n        return (\r\n            <>\r\n                <div className='overviewContainer'>\r\n                    <Typography variant=\"h5\" >\r\n                        Overview\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<AddIcon />}\r\n                    >\r\n                        NEW ACCOUNT\r\n                    </Button>\r\n                </div>\r\n                <WorldData data={worldData} heading={'All Over the World'} />\r\n                <WorldData data={top5CountriesData} heading={'Top 5 Affected Countries'} />\r\n                <WorldData data={top5StatesData} heading={'Top 5 Affected States In India'} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OverView;","import React, { Component } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport axios from 'axios';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './worldDataInTable.css'\r\n\r\nclass WorldDataInTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowsPerPage: 10,\r\n            page: 0,\r\n            worldData: [],\r\n            columns: [\r\n                { id: 'country', label: 'Country' },\r\n                { id: 'infected', label: 'Infected' },\r\n                { id: 'recovered', label: 'Recovered' },\r\n                { id: 'deceased', label: 'Deceased' },\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getWorldData();\r\n    }\r\n\r\n    getWorldData() {\r\n        axios.get('https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true').then(res => {\r\n            this.setState({\r\n                worldData: res.data\r\n            })\r\n        })\r\n    }\r\n    handleChangePage = (event, newPage) => {\r\n        this.setState({\r\n            page: newPage\r\n        })\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({\r\n            page: 0,\r\n            rowsPerPage: event.target.value\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { rowsPerPage, page, columns, worldData } = this.state;\r\n        if (worldData.length === 0) {\r\n            return (\r\n                <div className='spinnerContainer'>\r\n                    <CircularProgress></CircularProgress>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    All Countries Data\r\n                </Typography>\r\n                <Paper>\r\n                    <TableContainer>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align={column.align}\r\n                                            style={{ minWidth: column.minWidth }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {worldData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                    return (\r\n                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.country}>\r\n                                            {columns.map((column) => {\r\n                                                const value = row[column.id];\r\n                                                return (\r\n                                                    <TableCell key={value}>\r\n                                                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={worldData.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={this.handleChangePage}\r\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WorldDataInTable","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Typography, Paper, Grid } from '@material-ui/core';\r\nimport { Doughnut, Pie } from 'react-chartjs-2';\r\nimport './worldDataInGraphichalView.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nclass OverView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            worldData: {\r\n                labels: [\r\n                    'Active Cases',\r\n                    'Recovered Cases',\r\n                    'Total Deaths'\r\n                ],\r\n                datasets: [{\r\n                    data: [],\r\n                    backgroundColor: [\r\n                       '#ff6d00',\r\n                        '#1a237e',\r\n                        '#ec407a',\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                       '#ff6d00',\r\n                        '#1a237e',\r\n                        '#ec407a',\r\n                    ]\r\n                }]\r\n            },\r\n            top5CountriesData: {\r\n                labels: [\r\n\r\n                ],\r\n                datasets: [{\r\n                    data: [],\r\n                    backgroundColor: [\r\n                        '#14db9f',\r\n                        '#8f34eb',\r\n                        '#FF6384',\r\n                        '#36A2EB',\r\n                        '#FFCE56'\r\n                    ],\r\n                    hoverBackgroundColor: [\r\n                        '#14db9f',\r\n                        '#8f34eb',\r\n                        '#FF6384',\r\n                        '#36A2EB',\r\n                        '#FFCE56'\r\n                    ]\r\n                }]\r\n            },\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getWorldData();\r\n    }\r\n\r\n    compareValues = (key, order = 'asc') => {\r\n        return function innerSort(a, b) {\r\n            if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n                // property doesn't exist on either object\r\n                return 0;\r\n            }\r\n\r\n            const varA = (typeof a[key] === 'string')\r\n                ? a[key].toUpperCase() : a[key];\r\n            const varB = (typeof b[key] === 'string')\r\n                ? b[key].toUpperCase() : b[key];\r\n\r\n            let comparison = 0;\r\n            if (varA > varB) {\r\n                comparison = 1;\r\n            } else if (varA < varB) {\r\n                comparison = -1;\r\n            }\r\n            return (\r\n                (order === 'desc') ? (comparison * -1) : comparison\r\n            );\r\n        };\r\n    }\r\n\r\n    getWorldData() {\r\n        axios.get('https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true').then(res => {\r\n            const worldData = { ...this.state.worldData };\r\n            const top5CountriesData = { ...this.state.top5CountriesData };\r\n            const totalActiveCases = res.data.reduce((sum, val) => sum + val.infected, 0);\r\n            let totalRecoveredCases = 0;\r\n            res.data.forEach(val => {\r\n                if (val.recovered !== 'NA') {\r\n                    totalRecoveredCases = totalRecoveredCases + val.recovered\r\n                }\r\n            });\r\n            const top5CountriesCases = res.data.sort(this.compareValues('infected', 'desc')).slice(0, 5).map(val => val.infected);\r\n            const top5CountriesNames = res.data.sort(this.compareValues('infected', 'desc')).slice(0, 5).map(val => val.country);\r\n            const totalDeaths = res.data.reduce((sum, val) => sum + val.deceased, 0);\r\n            worldData.datasets[0].data = [totalActiveCases, totalRecoveredCases, totalDeaths]\r\n            top5CountriesData.datasets[0].data = top5CountriesCases;\r\n            top5CountriesData.labels = top5CountriesNames;\r\n            this.setState({\r\n                worldData,\r\n                top5CountriesData\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { worldData, top5CountriesData } = this.state;\r\n        if (worldData.datasets[0].data.length === 0 && top5CountriesData.labels.length === 0) {\r\n            return (\r\n                <div className='spinnerContainer'>\r\n                    <CircularProgress></CircularProgress>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <Paper className='master-container'>\r\n                <Grid container align='center'>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            World Wide Graph\r\n                    </Typography>\r\n                        <Doughnut data={worldData} />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Top 5 Countries Graph\r\n                    </Typography>\r\n                        <Pie data={top5CountriesData} />\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n\r\n            </Paper>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default OverView;","import React from 'react'\r\nimport { Redirect, Route, Switch ,withRouter } from 'react-router-dom'\r\nimport  OverView from './pages/overview/overview';\r\nimport  WolrdDataInTable from './pages/worldDataInTable/worlddataintable';\r\nimport  WolrdDataInGraphs from './pages/worldDataInGraphichalView/worldDataInGraphichalView';\r\n\r\nconst MainRouter = () => {\r\n  return (\r\n          <Switch>\r\n              <Route path={ '/' } component={withRouter(OverView)} exact render={() => <Redirect to=\"/overview\"/>}/>\r\n              <Route path={ '/overview' } component={ withRouter(OverView) }/>\r\n              <Route path={ '/worldDataInTable' } component={ withRouter(WolrdDataInTable) }/>\r\n              <Route path={ '/worldDataInGraph' } component={ withRouter(WolrdDataInGraphs) }/>\r\n          </Switch>\r\n  )\r\n}\r\n\r\nexport default MainRouter","import React from 'react';\r\nimport {\r\n  AppBar,\r\n  CssBaseline,\r\n  Hidden,\r\n  IconButton,\r\n  ListItem,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  useTheme,\r\n  createStyles,\r\n  List,\r\n  ListItemText,\r\n  Drawer,\r\n} from '@material-ui/core'\r\nimport { NavLink } from 'react-router-dom';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Router from '../../Router';\r\nimport './layout.css';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      zIndex: 323242,\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n    userName: {\r\n      marginLeft: '0.25rem',\r\n      marginRight: '0.5rem',\r\n      color: 'lightGrey'\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    content: {\r\n      backgroundColor: '#eceff1',\r\n      flexGrow: 1,\r\n      minHeight: '47rem',\r\n      padding: theme.spacing(3),\r\n      [theme.breakpoints.down('sm')]: {\r\n        minHeight: '64rem',\r\n      },\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'flex',\r\n      justifyContent: 'center'\r\n    },\r\n    link: {\r\n      color: 'grey',\r\n      fontSize: '0.75rem',\r\n      textDecoration: 'none',\r\n      display: 'block'\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nexport default function ResponsiveDrawer({ companyName = 'Company', userName = 'User', window }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div className={classes.drawerContainer}>\r\n      <List>\r\n        <NavLink to=\"/overview\" activeClassName=\"active\" className={classes.link}>\r\n          <ListItem button>\r\n            <ListItemText primary={'OVERVIEW'}>\r\n            </ListItemText>\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/worldDataIntable\" activeClassName=\"active\" className={classes.link}>\r\n          <ListItem button>\r\n            <ListItemText primary={'TABULAR REPRESENTATION'}>\r\n            </ListItemText>\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/worldDataInGraph\" activeClassName=\"active\" className={classes.link}>\r\n          <ListItem button>\r\n            <ListItemText primary={'GRAPHICHAL REPRESENTATION'}>\r\n            </ListItemText>\r\n          </ListItem>\r\n        </NavLink>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            {companyName}\r\n          </Typography>\r\n          <AccountCircleIcon />\r\n          <Typography variant=\"caption\" className={classes.userName}>\r\n            {userName}\r\n          </Typography>\r\n          <ExpandMoreIcon />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true,\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            <Toolbar />\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Router></Router>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import MuiNavBar from './MuiNavBar';\r\n\r\nexport default {\r\n    MuiNavBar\r\n};\r\n","export default {\r\n   root : {\r\n    backgroundColor : 'red'\r\n   }\r\n  };\r\n  ","import { colors } from '@material-ui/core';\r\n\r\nconst black = '#000000';\r\n\r\nexport default {\r\n  primary: {\r\n    dark: black,\r\n    main: colors.grey[800],\r\n  },\r\n  secondary: {\r\n    dark: black,\r\n    main: black,\r\n  },\r\n}","import { createMuiTheme } from '@material-ui/core';\r\n\r\nimport overrides from './overrides';\r\nimport palette from './palette';\r\nimport typography from './typography';\r\n\r\nconst theme = createMuiTheme({\r\n  palette,\r\n  overrides,\r\n  typography\r\n});\r\n\r\nexport default theme;\r\n","export default {\r\n    caption:{\r\n        color : 'grey'\r\n    }\r\n}","import React from 'react';\nimport Layout from './components/layout/layout';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport { BrowserRouter,withRouter,Redirect } from 'react-router-dom';\n\nfunction App(props) {\n  if (props.location.pathname === '/') {\n    return <Redirect to='/overview' />\n  }\n  return (\n    <div>\n      <BrowserRouter>\n        <ThemeProvider theme={theme}>\n          <Layout companyName='Born' userName='Brendan W.' />\n        </ThemeProvider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}